import yaml 
import json
import os

### TO NOTE: parameters used to run the ABC pipeline are set as default and are extracted from the config file. These rules also run on the specification of the current working directory. When running this snakemake file, do specify --directory [which should be the directory that contains the ABC-Enhancer-Gene-Prediction repo]

### importing json file
### Input_data_lookup.json is generated from running Snakefile in download directory
### It is a lookup table that matches DHS and H3K27ac bamfile to respective samples
with open(config['sample_json'], "r") as handle:
	sample_lookup = json.load(handle)

SAMPLES=list(sample_lookup.keys())

rule all:
	input: expand(["{basedir}/{sample}/Predictions/EnhancerPredictionsAllPutative.txt.gz"], basedir=config['base_output_dir'], sample=SAMPLES)

	#input: expand(["{basedir}/{sample}/Peaks/NA_peaks.narrowPeak", "{basedir}/{sample}/Peaks/NA_peaks.narrowPeak.sorted", "{basedir}/{sample}/Peaks/NA_peaks.narrowPeak.sorted.candidateRegions.bed", "{basedir}/{sample}/Neighborhoods/GeneList.txt", "{basedir}/{sample}/Neighborhoods/EnhancerList.txt", "{basedir}/{sample}/Predictions/EnhancerPredictionsAllPutative.txt.gz"], basedir=config['base_output_dir'], sample=SAMPLES)

precomputedCandidateRegions = lambda wildcards: sample_lookup[wildcards.sample]['candidate_regions']

### This rule runs macs callpeaks on DHS bam files for samples 
### Takes in DHS bam file and outputs NA_peaks.narrowPeak
### narrowPeak file also sorted for input into rule call_candidate_regions

rule macs: 
	params:
		accessibility_file = lambda wildcards: sample_lookup[wildcards.sample]['accessibility_file'],
		pval = lambda wildcards: sample_lookup[wildcards.sample]['macs_pval'],
		bamtype = lambda wildcards: sample_lookup[wildcards.sample]['macs_type'],
		genome = lambda wildcards: sample_lookup[wildcards.sample]['macs_genome']

	output: 
		"{basedir}/{sample}/Peaks/NA_peaks.narrowPeak"
	shell: """ 
		macs2 callpeak -f {params.bamtype} -g {params.genome} -p {params.pval} --call-summits --outdir {wildcards.basedir}/{wildcards.sample}/Peaks/ -t {params.accessibility_file} 
		"""

rule sort_macs: 
	input: 
		unsorted_macs = "{basedir}/{sample}/Peaks/NA_peaks.narrowPeak"
	params:
		chrom_sizes = config['chrom_sizes']
	output: 
		"{basedir}/{sample}/Peaks/NA_peaks.narrowPeak.sorted" 
	shell: """ 
		bedtools sort -faidx {params.chrom_sizes} -i {input.unsorted_macs} > {output}
		"""

### This rule runs ABC Candidate Regions script for samples
### Takes in NA_peaks.narrowPeak.sorted for each sample generated from macs2 callpeak from rule call_macs_peaks and generates NA_peaks.narrowPeak.sorted.candidateRegions.bed
rule candidate_regions:
	input:
		narrowPeak = "{basedir}/{sample}/Peaks/NA_peaks.narrowPeak.sorted"
	params:
		exe = config['code_dir']+"src/makeCandidateRegions.py",
		accessibility_bam = lambda wildcards: sample_lookup[wildcards.sample]['accessibility_file'],
		genome_tss = lambda wildcards: sample_lookup[wildcards.sample]['gene_annot_collapsed_tss'],
		peakExtendFromSummit = lambda wildcards: sample_lookup[wildcards.sample]['peakExtendFromSummit'],
		nStrongestPeak = lambda wildcards: sample_lookup[wildcards.sample]['nStrongestPeaks'],
		chrom_sizes = config['chrom_sizes'],
		regions_blacklist = config['regions_blacklist']
	output: 
		"{basedir}/{sample}/Peaks/NA_peaks.narrowPeak.sorted.candidateRegions.bed"
	shell: """
		python {params.exe} \
		--narrowPeak {input.narrowPeak} \
		--bam {params.accessibility_bam} \
		--outDir {wildcards.basedir}/{wildcards.sample}/Peaks/ \
		--chrom_sizes {params.chrom_sizes} \
		--regions_blacklist {params.regions_blacklist} \
		--regions_whitelist {params.genome_tss} \
		--peakExtendFromSummit {params.peakExtendFromSummit} \
		--nStrongestPeak {params.nStrongestPeak} \
		--genome_tss {params.genome_tss}
		"""

rule neighborhoods:
	input:
		candidateRegions = "{basedir}/{sample}/Peaks/NA_peaks.narrowPeak.sorted.candidateRegions.bed"
		#candidateRegions = lambda wildcards: sample_lookup[wildcards.sample]['candidate_regions'] if lambda wildcards: sample_lookup[wildcards.sample]['candidate_regions'] else "{basedir}/{sample}/Peaks/NA_peaks.narrowPeak.sorted.candidateRegions.bed"
	params:
		exe = config['code_dir']+"src/run.neighborhoods.py",
		DHS = lambda wildcards: sample_lookup[wildcards.sample]['DHS'],
		ATAC = lambda wildcards: sample_lookup[wildcards.sample]['ATAC'],
		H3K27ac = lambda wildcards: sample_lookup[wildcards.sample]['H3K27ac'],
		genes = config['gene_annot'],
		ubiquitous_genes = config['ubiquitous_genes'],
		chrom_sizes = config['chrom_sizes'],
		qnorm = config['qnorm']
	output: 
		"{basedir}/{sample}/Neighborhoods/EnhancerList.txt",
		"{basedir}/{sample}/Neighborhoods/GeneList.txt"
	shell:"""
		python {params.exe} \
		--candidate_enhancer_regions {input.candidateRegions} \
		--DHS {params.DHS} \
		--ATAC {params.ATAC} \
		--H3K27ac {params.H3K27ac} \
		--chrom_sizes {params.chrom_sizes} \
		--genes {params.genes} \
		--ubiquitously_expressed_genes {params.ubiquitous_genes} \
		--qnorm {params.qnorm} \
		--outdir {wildcards.basedir}/{wildcards.sample}/Neighborhoods/ 
		"""

### This rule runs ABC Predictions script for samples
### Takes in EnhancerList.txt and GeneList.txt generated from rule call_neighborhoods above and generates Enhancer-Gene Predictions and links
rule predictions:
	input:
		enhancers = "{basedir}/{sample}/Neighborhoods/EnhancerList.txt",
		genes = "{basedir}/{sample}/Neighborhoods/GeneList.txt"
	params:
		exe = config['code_dir']+"src/predict.py",
		cellType = "{sample}", 
		hic_dir = lambda wildcards: sample_lookup[wildcards.sample]['hic_dir'],
		hic_resolution = lambda wildcards: sample_lookup[wildcards.sample]['hic_resolution'],
		threshold = lambda wildcards: sample_lookup[wildcards.sample]['threshold']
	output: 
		"{basedir}/{sample}/Predictions/EnhancerPredictionsAllPutative.txt.gz"
	shell:"""
		python {params.exe} \
		--enhancers {input.enhancers} \
		--genes {input.genes} \
		--outdir {wildcards.basedir}/{wildcards.sample}/Predictions/ \
		--HiCdir {params.hic_dir} \
		--hic_resolution {params.hic_resolution} \
		--scale_hic_using_powerlaw \
		--threshold {params.threshold} \
		--make_all_putative \
		--cellType {params.cellType} 
		"""
