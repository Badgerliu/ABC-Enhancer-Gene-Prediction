import yaml 
import json
import os


# import json file 
with open(workflow.workdir_init+config['download_dir']+"input_data_lookup.json", "r") as handle:
	sample_lookup = json.load(handle)
print(type(sample_lookup))
print(sample_lookup)

rule all:
	input: expand("{config}/Peaks_{sample}/NA_peaks.narrowPeak", config=config['predictions_results_dir'] ,sample=list(sample_lookup.keys()))

def rule_input(wildcards):
	""" Returns DNA bam file for specific sample """
	return config['output_data_dir']+sample_lookup[wildcards.sample]['1']

rule call_macs_peaks: 
	input: 
		data = rule_input,
		input_dir = config['output_data_dir'],
		output_dir = config['predictions_results_dir']+"/Peaks_{sample}"
	params:
		pval = config['params_macs']['pval'],
		threads = config['params_macs']['threads'],
		chrom_sizes = config['params_candidate']['chrom_sizes']
	output: 
		file = config['predictions_results_dir']+"/Peaks_{sample}/NA_peaks.narrowPeak"
	shell: 
		""" 
		macs2 callpeak -f BAM -g hs -p {params.pval} --call-summits --outdir {input.output_dir} -t {input.data}
		bedtools sort -faidx {params.chrom_sizes} -i {output.file} > {output.file}.sorted
		"""


rule call_candidate_regions:
        input:
                exe = workflow.workdir_init+config['code']+"makeCandidateRegions.py",
                data = config['predictions_results_dir']+"/Peaks_{sample}/NA_peaks.narrowPeak.sorted",
		bam_inputs = rule_input,
		output_dir = config['predictions_results_dir']+"/Peaks_{sample}"
	params:
		code_dir = workflow.workdir_init+config['code'],
		chrom_sizes = config['params_candidate']['chrom_sizes'],
		regions_blacklist = config['params_candidate']['regions_blacklist'],
		genome_tss = config['params_candidate']['genome_tss'],
                peakExtendFromSummit = config['params_candidate']['peakExtendFromSummit'],
		nStrongestPeaks = config['params_candidate']['nStrongestPeaks'],
		threads = 10
	output: config['predictions_results_dir']+"/Peaks_{sample}/NA_peaks.narrowPeak.candidateRegions.bed"
                                                                  
	shell: """
		python {input.exe} --narrowPeak {input.data} --bam {input.bam_inputs} --outDir {input.output_dir} --chrom_sizes {params.chrom_sizes} --regions_blacklist {params.regions_blacklist} --regions_whitelist {params.genome_tss} --peakExtendFromSummit {params.peakExtendFromSummit} --nStrongestPeak {params.nStrongestPeak} --genome_tss {params.genome_tss}
		"""

def rule_getbam(wildcards):
        """ Returns DHS and H3K27ac bam file for specific sample """
        files = [sample_lookup[wildcards.sample]['1'], sample_lookup[wildcards.sample]['2']]
	return [config['output_data_dir']+str(file) for file in files]

rule call_neighborhoods:
        input:
                exe = workflow.workdir_init+config['code']+"run.neighborhoods.py",
                input_dir = config['output_data_dir'],
                data = config['predictions_results_dir']+"/Peaks_{sample}/NA_peaks.narrowPeak.candidateRegions.bed" ,
		bam_files = rule_getbam,
		output_dir = config['predictions_results_dir']+"/Neighborhoods_{sample}"

        params:
                code_dir = workflow.workdir_init+config['code'],
                genes = config['params_neighborhoods']['genes'],
                ubiquitous_genes = config['params_neighborhoods']['ubiquitous_genes'],
                chrom_sizes = config['params_candidate']['chrom_sizes'],
                qnorm = config['params_neighborhoods']['qnorm']

        output: config['predictions_results_dir']+"/Neighborhood_{sample}/EnhancerList.txt"
        shell:
                """
                python {input.exe} --candidate_enhancer_regions {input.data} --DHS {input.bam_files}[0] --H3K27ac {input.bam_files}[1] --chrom_sizes {params.chrom_sizes} --outdir {input.output_dir} --genes {params.genes} --ubiquitously_expressed_genes {params.ubiquitous_genes} --qnorm {params.qnorm}
                """

rule predictions:
        input:
                exe = workflow.workdir_init+config['workflow_scripts']+"predict.py",
                data = config['predictions_results_dir']+"Neighborhood_{sample}/EnhancerList.txt",
		output_dir = config['predictions_results_dir']+"/Predictions_{sample}",
		cellType = "{sample}"
        params:
                code_dir = workflow.workdir_init+config['code'],
                hic_dir = config['hic_dir'],
                hic_resolution = config['params_predict']['hic_resolution'],
                scale_hic_using_powerlaw = config['params_predict']['scale_hic'],
                threshold = config['params_predict']['threshold'],
                make_all_putative = config['params_predict']['all_putative']

        output: config['predictions_results_dir']+"/Prediction_{sample}/EnhancerPredictionsAllPutative.txt.gz"
        shell:
                """
                python {input.exe} --enhancers {input.data} --outdir {input.output_dir} --HiCdir {params.hic_dir} --hic_resolution {params.hic_resolution} --scale_hic_using_powerlaw {params.scale_hic_using_powerlaw} --threshold {params.threshold} --make_all_putative {params.make_all_putative} --cellType {input.cellType} 
                """
